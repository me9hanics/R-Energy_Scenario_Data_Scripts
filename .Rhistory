load("C:/Users/hanic/OneDrive/Asztali gép/InterviewTask/Data/EXAMPLE EXPECTED OUTPUT/RESULTS-DLE-emulator-SHAPE-final.RData")
load("C:/Users/hanic/OneDrive/Asztali gép/InterviewTask/Data/EXAMPLE EXPECTED OUTPUT/RESULTS-DLE-emulator-SHAPE-final.RData")
install.packages("here")
#("C:/InterviewTask/Data/scenario_FE_SHAPE-final.RData")
library(here) # for easy and clear relative paths
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set work directory to this file
here::i_am("TaskReadme.txt")
source("utils.R") # common utility functions for this repository
source("calculator_utils.R") # specific model utility functions
#x <- load("C:/InterviewTask/Data/scenario_FE_SHAPE-final.Rdata")
#y <- load("C:/InterviewTask/Data/projected_dle-total-and-sectoral-scaled_SHAPE-final.Rdata")
#z <- load("C:/InterviewTask/Data/projected_energy_inequality_SHAPE-final.Rdata")
#' WRITE YOUR CODE BELOW
#' ...
#' ...
#' ...
install.packages(pkgs)
x <- load("C:/InterviewTask/Data/scenario_FE_SHAPE-final.Rdata")
x <- source("C:/InterviewTask/Data/scenario_FE_SHAPE-final.Rdata")
y <- source("C:/InterviewTask/Data/projected_dle-total-and-sectoral-scaled_SHAPE-final.Rdata")
z <- load("C:/InterviewTask/Data/projected_energy_inequality_SHAPE-final.Rdata")
z <- source("C:/InterviewTask/Data/projected_energy_inequality_SHAPE-final.Rdata")
load("C:/InterviewTask/Data/scenario_FE_SHAPE-final.Rdata", ex <- new.env())
source("C:/InterviewTask/Data/scenario_FE_SHAPE-final.Rdata", ex <- new.env())
ls()ű
ls()
View(ex)
View(ex)
View(ex)
View(ex)
View(ex)
View(ex)
View(ex)
ex
load("C:/InterviewTask/Data/scenario_FE_SHAPE-final.RData")
readRDS("C:/InterviewTask/Data/scenario_FE_SHAPE-final.Rlsdata")
readRDS("C:/InterviewTask/Data/scenario_FE_SHAPE-final.Rdata")
readRDS("C:/InterviewTask/Data/projected_dle-total-and-sectoral-scaled_SHAPE-final.Rdata")
readRDS("C:/InterviewTask/Data/projected_energy_inequality_SHAPE-final.Rdata")
x <- readRDS("C:/InterviewTask/Data/scenario_FE_SHAPE-final.Rdata")
View(x)
View(x)
View(x)
scenario <- readRDS("C:/InterviewTask/Data/scenario_FE_SHAPE-final.Rdata")
dle <- readRDS("C:/InterviewTask/Data/projected_dle-total-and-sectoral-scaled_SHAPE-final.Rdata")
energy <- readRDS("C:/InterviewTask/Data/projected_energy_inequality_SHAPE-final.Rdata")
View(ex)
type(dle)
types(dle)
typeof(dle)
ls(list)
ls(dle)
View(dle)
View(dle)
View(energy)
View(energy)
View(scenario)
library(tidyverse)
combined = full_join(dle, scenario)
View(combined)
View(combined)
comb12 = full_join(dle, scenario)
combined = full_join(comb12,energy)
View(combined)
View(combined)
combined %>% group_by(model, scenario, iso, variable, year)
combined = full_join(comb12,energy)
combined %>% group_by(model, scenario, iso, variable, year) %>% dplyr::summarize(model = paste(na.omit(model)), scenario = paste(na.omit(scenario)), iso = paste(na.omit(iso)), variable = paste(na.omit(variable)), year = paste(na.omit(year)))
combined %>% group_by(model, scenario, iso, variable, year) %>% dplyr::summarize(model = paste(na.omit(model)), scenario = paste(na.omit(scenario)), iso = paste(na.omit(iso)), variable = paste(na.omit(variable)), year = paste(na.omit(year)))
View(combined)
View(combined)
scenario <- readRDS("C:/InterviewTask/Data/scenario_FE_SHAPE-final.Rdata")
dle <- readRDS("C:/InterviewTask/Data/projected_dle-total-and-sectoral-scaled_SHAPE-final.Rdata")
energy <- readRDS("C:/InterviewTask/Data/projected_energy_inequality_SHAPE-final.Rdata")
comb12 = full_join(dle, scenario)
combined = full_join(comb12,energy)
combined %>% group_by(model, scenario, iso, variable, year) %>% dplyr::summarize(model = paste(na.omit(model)), scenario = paste(na.omit(scenario)), iso = paste(na.omit(iso)), variable = paste(na.omit(variable)), year = paste(na.omit(year)))
scenario <- readRDS("Data/scenario_FE_SHAPE-final.Rdata")
energy <- readRDS("Data/projected_energy_inequality_SHAPE-final.Rdata")
x <- readRDS("Data/projected_energy_inequality_SHAPE-final.Rdata")
install.packages("here")
#("C:/InterviewTask/Data/scenario_FE_SHAPE-final.RData")
library(here) # for easy and clear relative paths
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set work directory to this file
here::i_am("TaskReadme.txt")
library(data.table)
#library(reshape2)
library(tidyverse)
source("utils.R") # common utility functions for this repository
scenario <- readRDS("Data/scenario_FE_SHAPE-final.Rdata")
dle <- readRDS("Data/projected_dle-total-and-sectoral-scaled_SHAPE-final.Rdata")
energy <- readRDS("Data/projected_energy_inequality_SHAPE-final.Rdata")
comb12 = full_join(dle, scenario)
library(here) # for easy and clear relative paths
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set work directory to this file
here::i_am("TaskReadme.txt")
library(data.table)
#library(reshape2)
library(tidyverse)
source("utils.R") # common utility functions for this repository
library(here) # for easy and clear relative paths
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set work directory to this file
library(data.table)
#library(reshape2)
library(tidyverse)
source("utils.R") # common utility functions for this repository
library(data.table)
#library(reshape2)
library(tidyverse)
source("utils.R") # common utility functions for this repository
scenario <- readRDS("Data/scenario_FE_SHAPE-final.Rdata")
dle <- readRDS("Data/projected_dle-total-and-sectoral-scaled_SHAPE-final.Rdata")
energy <- readRDS("Data/projected_energy_inequality_SHAPE-final.Rdata")
comb12 = full_join(dle, scenario)
library(tidyverse)
comb12 = full_join(dle, scenario)
combined = full_join(comb12,energy)
combined %>% group_by(model, scenario, iso, variable, year) %>% dplyr::summarize(model = paste(na.omit(model)), scenario = paste(na.omit(scenario)), iso = paste(na.omit(iso)), variable = paste(na.omit(variable)), year = paste(na.omit(year)))
comb12 = full_join(dle, scenario)
combined = full_join(comb12,energy)
combined %>% group_by(model, scenario, iso, variable, year) %>% dplyr::summarize(model = paste(na.omit(model)), scenario = paste(na.omit(scenario)), iso = paste(na.omit(iso)), variable = paste(na.omit(variable)), year = paste(na.omit(year)))
capture.output(combined, file = "output.csv")
View(combined)
capture.output(combined, file = "output_txt.txt")
library(RUnit)
install.packages("testthat")
library(here) # for easy and clear relative paths
library(testthat)
combined = full_join(comb12,energy)
# Script calculating energy deprivation
log_info("DLE calculator: all variables have been prepared and projected, combining data now.")
source("calculator_output_lognormal-calculation.R")
library(data.table)
#library(reshape2)
library(tidyverse)
library(RUnit)
source("utils.R") # common utility functions for this repository
library(data.table)
#library(reshape2)
library(tidyverse)
library(RUnit)
source("utils.R") # common utility functions for this repository
source("calculator_utils.R") # specific model utility functions
out <- source("calculator_output_lognormal-calculation.R")
View(save_scenario_to_html_timeseries)
View(save_scenario_to_html_timeseries)
IAM.OUTPUT.SHORT.FILENAME = "NewOutput.txt"
IAM.OUTPUT.SHORT.FILENAME = "NewOutput"
# Script calculating energy deprivation
log_info("DLE calculator: all variables have been prepared and projected, combining data now.")
# load data
scenario.assessment.data <-
# final energy per capita (+population)
readRDS(
here(
"data",
paste0("scenario_FE", "_", IAM.OUTPUT.SHORT.FILENAME, ".RData")
)
) %>% rename_remind_scenarios() %>%
# energy inequality
left_join(
readRDS(
here(
"data",
paste0("projected_energy_inequality", "_", IAM.OUTPUT.SHORT.FILENAME, ".RData")
)
) %>% select(-scenario.mapping) %>% ungroup() %>% rename_remind_scenarios()
) %>%
# dle
left_join(
readRDS(
here(
"data",
paste0("projected_dle-total-and-sectoral-scaled", "_", IAM.OUTPUT.SHORT.FILENAME, ".RData")
)
)
) %>%
# drop data where missing essential data
drop_na(energy.per.capita, energy.gini, dle.threshold.curtech, dle.threshold.adjusted) %>%
# reorder again
arrange(model, scenario, iso, variable, unit, year)
# Script calculating energy deprivation
log_info("DLE calculator: all variables have been prepared and projected, combining data now.")
# load data
scenario.assessment.data <-
# final energy per capita (+population)
readRDS(
here(
"data",
paste0("scenario_FE", "_", IAM.OUTPUT.SHORT.FILENAME, ".RData")
)
) %>% rename_remind_scenarios() %>%
# energy inequality
left_join(
readRDS(
here(
"data",
paste0("projected_energy_inequality", "_", IAM.OUTPUT.SHORT.FILENAME, ".RData")
)
) %>% select(-scenario.mapping) %>% ungroup() %>% rename_remind_scenarios()
) %>%
# dle
left_join(
readRDS(
here(
"data",
paste0("projected_dle-total-and-sectoral-scaled", "_", IAM.OUTPUT.SHORT.FILENAME, ".RData")
)
)
) %>%
# drop data where missing essential data
drop_na(energy.per.capita, energy.gini, dle.threshold.curtech, dle.threshold.adjusted) %>%
# reorder again
arrange(model, scenario, iso, variable, unit, year)
rlang::last_trace()
arrange(model, scenario, iso, variable, unit, year)
# drop data where missing essential data
drop_na(energy.per.capita, energy.gini, dle.threshold.curtech, dle.threshold.adjusted) %>%
arrange(model, scenario, iso, variable, unit, year)
arrange(model, scenario, iso, variable, unit, year)
arrange(model, scenario, iso, variable, unit, year)
arrange(model, scenario, iso, variable, unit, year)
log_info("DLE calculator: obtain share below threshold and depth of deficit - assuming lognormal distribution")
# calculate share of people below threshold and depth of deficit
scenario.assessment.calculated <- scenario.assessment.data %>%
mutate(
sig = GetInverseCDF_lognormal(energy.gini)
) %>%
mutate(nu = log(energy.per.capita) - (sig^2) / 2) %>%
mutate(share.below.projected.curtech = GetDepthofDeficit_lognormal(nu, sig, dle.threshold.curtech, "share")) %>%
mutate(depth.below.projected.curtech = GetDepthofDeficit_lognormal(nu, sig, dle.threshold.curtech, "DoD")) %>%
mutate(share.below.projected.adjusted = GetDepthofDeficit_lognormal(nu, sig, dle.threshold.adjusted, "share")) %>%
mutate(depth.below.projected.adjusted = GetDepthofDeficit_lognormal(nu, sig, dle.threshold.adjusted, "DoD")) %>%
select(-sig, -nu)
# Script calculating energy deprivation
log_info("DLE calculator: all variables have been prepared and projected, combining data now.")
# load data
scenario.assessment.data <-
# final energy per capita (+population)
readRDS(
here(
"data",
paste0("scenario_FE", "_", IAM.OUTPUT.SHORT.FILENAME, ".RData")
)
) %>% rename_remind_scenarios() %>%
# energy inequality
left_join(
readRDS(
here(
"data",
paste0("projected_energy_inequality", "_", IAM.OUTPUT.SHORT.FILENAME, ".RData")
)
) %>% select(-scenario.mapping) %>% ungroup() %>% rename_remind_scenarios()
) %>%
# dle
left_join(
readRDS(
here(
"data",
paste0("projected_dle-total-and-sectoral-scaled", "_", IAM.OUTPUT.SHORT.FILENAME, ".RData")
)
)
) %>%
# drop data where missing essential data
drop_na(energy.per.capita, energy.gini, dle.threshold.curtech, dle.threshold.adjusted) %>%
# reorder again
arrange(model, scenario, iso, variable, unit, year)
log_info("DLE calculator: obtain share below threshold and depth of deficit - assuming lognormal distribution")
# calculate share of people below threshold and depth of deficit
scenario.assessment.calculated <- scenario.assessment.data %>%
mutate(
sig = GetInverseCDF_lognormal(energy.gini)
) %>%
mutate(nu = log(energy.per.capita) - (sig^2) / 2) %>%
mutate(share.below.projected.curtech = GetDepthofDeficit_lognormal(nu, sig, dle.threshold.curtech, "share")) %>%
mutate(depth.below.projected.curtech = GetDepthofDeficit_lognormal(nu, sig, dle.threshold.curtech, "DoD")) %>%
mutate(share.below.projected.adjusted = GetDepthofDeficit_lognormal(nu, sig, dle.threshold.adjusted, "share")) %>%
mutate(depth.below.projected.adjusted = GetDepthofDeficit_lognormal(nu, sig, dle.threshold.adjusted, "DoD")) %>%
select(-sig, -nu)
# Script calculating energy deprivation
log_info("DLE calculator: all variables have been prepared and projected, combining data now.")
# load data
scenario.assessment.data <-
# final energy per capita (+population)
readRDS(
here(
"data",
paste0("scenario_FE", "_", IAM.OUTPUT.SHORT.FILENAME, ".RData")
)
) %>% rename_remind_scenarios() %>%
# energy inequality
left_join(
readRDS(
here(
"data",
paste0("projected_energy_inequality", "_", IAM.OUTPUT.SHORT.FILENAME, ".RData")
)
) %>% select(-scenario.mapping) %>% ungroup() %>% rename_remind_scenarios()
) %>%
# dle
left_join(
readRDS(
here(
"data",
paste0("projected_dle-total-and-sectoral-scaled", "_", IAM.OUTPUT.SHORT.FILENAME, ".RData")
)
)
) %>%
# drop data where missing essential data
drop_na(energy.per.capita, energy.gini, dle.threshold.curtech, dle.threshold.adjusted) %>%
# reorder again
log_info("DLE calculator: obtain share below threshold and depth of deficit - assuming lognormal distribution")
load("C:/GitHubRepo/R-Energy_Scenario_Data_Scripts/Data/projected_dle-total-and-sectoral-scaled_NewOutput.RData")
IAM.OUTPUT.SHORT.FILENAME = "SHAPE-final"
# Script calculating energy deprivation
log_info("DLE calculator: all variables have been prepared and projected, combining data now.")
# load data
scenario.assessment.data <-
# final energy per capita (+population)
readRDS(
here(
"data",
paste0("scenario_FE", "_", IAM.OUTPUT.SHORT.FILENAME, ".RData")
)
) %>% rename_remind_scenarios() %>%
# energy inequality
left_join(
readRDS(
here(
"data",
paste0("projected_energy_inequality", "_", IAM.OUTPUT.SHORT.FILENAME, ".RData")
)
) %>% select(-scenario.mapping) %>% ungroup() %>% rename_remind_scenarios()
) %>%
# dle
left_join(
readRDS(
here(
"data",
paste0("projected_dle-total-and-sectoral-scaled", "_", IAM.OUTPUT.SHORT.FILENAME, ".RData")
)
)
) %>%
# drop data where missing essential data
drop_na(energy.per.capita, energy.gini, dle.threshold.curtech, dle.threshold.adjusted) %>%
# reorder again
arrange(model, scenario, iso, variable, unit, year)
log_info("DLE calculator: obtain share below threshold and depth of deficit - assuming lognormal distribution")
# calculate share of people below threshold and depth of deficit
scenario.assessment.calculated <- scenario.assessment.data %>%
mutate(
sig = GetInverseCDF_lognormal(energy.gini)
) %>%
mutate(nu = log(energy.per.capita) - (sig^2) / 2) %>%
mutate(share.below.projected.curtech = GetDepthofDeficit_lognormal(nu, sig, dle.threshold.curtech, "share")) %>%
mutate(depth.below.projected.curtech = GetDepthofDeficit_lognormal(nu, sig, dle.threshold.curtech, "DoD")) %>%
mutate(share.below.projected.adjusted = GetDepthofDeficit_lognormal(nu, sig, dle.threshold.adjusted, "share")) %>%
mutate(depth.below.projected.adjusted = GetDepthofDeficit_lognormal(nu, sig, dle.threshold.adjusted, "DoD")) %>%
select(-sig, -nu)
log_info(paste0("DLE calculator is done. Now the data should be saved in CSV and/or RData format."))
IAM.OUTPUT.SHORT.FILENAME = "SHAPE-final"
# Script calculating energy deprivation
log_info("DLE calculator: all variables have been prepared and projected, combining data now.")
# load data
scenario.assessment.data <-
# final energy per capita (+population)
readRDS(
here(
"data",
paste0("scenario_FE", "_", IAM.OUTPUT.SHORT.FILENAME, ".RData")
)
) %>% rename_remind_scenarios() %>%
# energy inequality
left_join(
readRDS(
here(
"data",
paste0("projected_energy_inequality", "_", IAM.OUTPUT.SHORT.FILENAME, ".RData")
)
) %>% select(-scenario.mapping) %>% ungroup() %>% rename_remind_scenarios()
) %>%
# dle
left_join(
readRDS(
here(
"data",
paste0("projected_dle-total-and-sectoral-scaled", "_", IAM.OUTPUT.SHORT.FILENAME, ".RData")
)
)
) %>%
# drop data where missing essential data
drop_na(energy.per.capita, energy.gini, dle.threshold.curtech, dle.threshold.adjusted) %>%
# reorder again
arrange(model, scenario, iso, variable, unit, year)
library(here) # for easy and clear relative paths
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set work directory to this file
here::i_am("TaskReadme.txt")
library(data.table)
#library(reshape2)
library(tidyverse)
library(RUnit)
source("utils.R") # common utility functions for this repository
source("calculator_utils.R") # specific model utility functions
# Script calculating energy deprivation
log_info("DLE calculator: all variables have been prepared and projected, combining data now.")
# load data
scenario.assessment.data <-
# final energy per capita (+population)
readRDS(
here(
"data",
paste0("scenario_FE", "_", IAM.OUTPUT.SHORT.FILENAME, ".RData")
)
) %>% rename_remind_scenarios() %>%
# energy inequality
left_join(
readRDS(
here(
"data",
paste0("projected_energy_inequality", "_", IAM.OUTPUT.SHORT.FILENAME, ".RData")
)
) %>% select(-scenario.mapping) %>% ungroup() %>% rename_remind_scenarios()
) %>%
# dle
left_join(
readRDS(
here(
"data",
paste0("projected_dle-total-and-sectoral-scaled", "_", IAM.OUTPUT.SHORT.FILENAME, ".RData")
)
)
) %>%
# drop data where missing essential data
drop_na(energy.per.capita, energy.gini, dle.threshold.curtech, dle.threshold.adjusted) %>%
# reorder again
arrange(model, scenario, iso, variable, unit, year)
log_info("DLE calculator: obtain share below threshold and depth of deficit - assuming lognormal distribution")
# calculate share of people below threshold and depth of deficit
scenario.assessment.calculated <- scenario.assessment.data %>%
mutate(
sig = GetInverseCDF_lognormal(energy.gini)
) %>%
mutate(nu = log(energy.per.capita) - (sig^2) / 2) %>%
mutate(share.below.projected.curtech = GetDepthofDeficit_lognormal(nu, sig, dle.threshold.curtech, "share")) %>%
mutate(depth.below.projected.curtech = GetDepthofDeficit_lognormal(nu, sig, dle.threshold.curtech, "DoD")) %>%
mutate(share.below.projected.adjusted = GetDepthofDeficit_lognormal(nu, sig, dle.threshold.adjusted, "share")) %>%
mutate(depth.below.projected.adjusted = GetDepthofDeficit_lognormal(nu, sig, dle.threshold.adjusted, "DoD")) %>%
select(-sig, -nu)
log_info(paste0("DLE calculator is done. Now the data should be saved in CSV and/or RData format."))
View(scenario.assessment.data)
View(scenario.assessment.calculated)
source("calculator_output_lognormal-calculation.R")
capture.output(scenario.assessment.data, file = "ScenarioDataOutputCSV.csv")
capture.output(scenario.assessment.data, file = "ScenarioDataOutputR.RData")
capture.output(scenario.assessment.calculated, file = "CalculatedOutputCSV.csv")
capture.output(scenario.assessment.calculated, file = "CalculatedOutputR.RData")
typeof(scenario.assessment.calculated)
write_csv(scenario.assessment.calculated, "abc.csv")
write_csv(scenario.assessment.data, "ScenarioDataOutputCSV.csv")
save(scenario.assessment.data, file = "ScenarioDataOutputR.RData")
write_csv(scenario.assessment.calculated, "CalculatedOutputCSV.csv")
save(scenario.assessment.calculated, file = "CalculatedOutputR.RData")
View(scenario.assessment.calculated)
View(scenario.assessment.data)
install.packages("RUnit")
install.packages("RUnit")
source("UnitTest.R")
source("UnitTest.R")
install.packages("here")
source("UnitTest.R")
source("UnitTest.R")
x <- readingFile("CalculatedOutputCSV.csv")
x <- readingFile("CalculatedOutputCSV.csv")
source("UnitTest.R")
library(R.utils)
help(R.utils)
typeof(x)
